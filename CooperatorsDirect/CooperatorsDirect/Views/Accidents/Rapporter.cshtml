@model CooperatorsDirect.Models.Accident

@{
    ViewBag.Title = "Rapporter";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Rapporter un accident</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div id="divFormComplete" class="form-horizontal">
        <h4>Accident</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.DateAccidentEnregistre, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DateAccidentEnregistre, new { htmlAttributes = new { @class = "form-control", style = "max-width: 600px;", @readonly = "readonly", @value = "test" } })@*Model.DateAccidentEnregistre.ToShortDateString() } })*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DateAccidentProduit, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DateAccidentProduit, new { htmlAttributes = new { @class = "form-control", style = "max-width: 600px;" } })
                @Html.ValidationMessageFor(model => model.DateAccidentProduit, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Localisation, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Localisation, new { htmlAttributes = new { @class = "form-control", style = "max-width: 600px;" } })
                @Html.ValidationMessageFor(model => model.Localisation, "", new { @id = "messageLocalisation", @class = "text-danger" })
                <p></p>
                <div id="mapHolder"></div>
            </div>
        </div>

        <h3 id="IndicateurEtape">Étape 1</h3>

        <div id="page1" class="simple-tooltip">

            <div id="divAuMoinsDeuxVehicules" class="form-group simple-tooltip-AuMoinsDeuxVehicules">
                @Html.LabelFor(model => model.AuMoinsDeuxVehicules, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-2">
                    <div class="checkbox">
                        @Html.CheckBoxFor(model => model.AuMoinsDeuxVehicules, new { @checked = "checked" })
                        @Html.ValidationMessageFor(model => model.AuMoinsDeuxVehicules, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div id="divProduitAuQuebec" class="form-group simple-tooltip simple-tooltip-ProduitAuQuebec">
                @Html.LabelFor(model => model.ProduitAuQuebec, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.ProduitAuQuebec)
                        @Html.ValidationMessageFor(model => model.ProduitAuQuebec, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div id="divProprietairesIdentifies" class="form-group simple-tooltip simple-tooltip-ProprietairesIdentifies">
                @Html.LabelFor(model => model.ProprietairesIdentifies, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.ProprietairesIdentifies)
                        @Html.ValidationMessageFor(model => model.ProprietairesIdentifies, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div id="divProprietairesDifferents" class="form-group simple-tooltip simple-tooltip-ProprietairesDifferents">
                @Html.LabelFor(model => model.ProprietairesDifferents, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.ProprietairesDifferents)
                        @Html.ValidationMessageFor(model => model.ProprietairesDifferents, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div id="divConducteurHeurtePropreVehicule" class="form-group simple-tooltip simple-tooltip-ConducteurHeurtePropreVehicule">
                @Html.LabelFor(model => model.ConducteurHeurtePropreVehicule, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.ConducteurHeurtePropreVehicule)
                        @Html.ValidationMessageFor(model => model.ConducteurHeurtePropreVehicule, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

        </div>

        <div id="page2">

            <div id="divSituationVehicules" class="form-group simple-tooltip simple-tooltip-SituationVehicules">
                @Html.LabelFor(model => model.SituationVehicules, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EnumDropDownListFor(model => model.SituationVehicules, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.SituationVehicules, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>

        <div id="page3">

            <div class="table" id="tableCirconstances">
                @{
                    int i = 0;
                    int j = 0;
                    <div class="form-group row">
                        @foreach (var value in Enum.GetValues(Model.CirconstancesAccident.GetType()))
                        {

                            @Html.RadioButtonFor(model => model.CirconstancesAccident, value, new { @class = "col-xs-1" })
                            @Html.Label(value.ToString(), new { @class = "col-xs-4" })
                            i++;
                            if (i > 1)
                            {
                                i = 0;
                                j++;
                                @Html.Raw("</div>")
                                @Html.Raw("<div class=\"form-group row\">")
                            }
                        }
                    </div>
                }
            </div>

            <div id="divCirconstancesAccident" class="form-group simple-tooltip simple-tooltip-CirconstancesAccident">
                @Html.LabelFor(model => model.CirconstancesAccident, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EnumDropDownListFor(model => model.CirconstancesAccident, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CirconstancesAccident, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>

        <div id="page4" class="simple-tooltip">

            <div id="divRaisonDeplacement" class="form-group simple-tooltip simple-tooltip-RaisonDeplacement">
                @Html.LabelFor(model => model.RaisonDeplacement, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.RaisonDeplacement, new { htmlAttributes = new { @class = "form-control", style = "max-width: 600px;" } })
                    @Html.ValidationMessageFor(model => model.RaisonDeplacement, "", new { @class = "text-danger" })
                </div>
            </div>

            <div id="divBlessures" class="form-group simple-tooltip simple-tooltip-Blessures">
                @Html.LabelFor(model => model.Blessures, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Blessures, new { htmlAttributes = new { @class = "form-control", style = "max-width: 600px;" } })
                    @Html.ValidationMessageFor(model => model.Blessures, "", new { @class = "text-danger" })
                </div>
            </div>

            <div id="divTemoins" class="form-group simple-tooltip simple-tooltip-Temoins">
                @Html.LabelFor(model => model.Temoins, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Temoins, new { htmlAttributes = new { @class = "form-control", style = "max-width: 600px;" } })
                    @Html.ValidationMessageFor(model => model.Temoins, "", new { @class = "text-danger" })
                </div>
            </div>

            <div id="divInformationsAutreVoiture" class="form-group simple-tooltip simple-tooltip-InformationsAutreVoiture">
                @Html.LabelFor(model => model.InformationsAutreVoiture, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.InformationsAutreVoiture, new { htmlAttributes = new { @class = "form-control", style = "max-width: 600px;" } })
                    @Html.ValidationMessageFor(model => model.InformationsAutreVoiture, "", new { @class = "text-danger" })
                </div>
            </div>

            <div id="divDetailsSupplementaires" class="form-group simple-tooltip simple-tooltip-DetailsSupplementaires ">
                @Html.LabelFor(model => model.DetailsSupplementaires, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.DetailsSupplementaires, new { htmlAttributes = new { @class = "form-control", style = "max-width: 600px;" } })
                    @Html.ValidationMessageFor(model => model.DetailsSupplementaires, "", new { @class = "text-danger" })
                </div>
            </div>

            <div id="Details" class="form-group simple-tooltip simple-tooltip-Details ">
                @Html.LabelFor(model => model.Details, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Details, new { htmlAttributes = new { @class = "form-control", style = "max-width: 600px;" } })
                    @Html.ValidationMessageFor(model => model.Details, "", new { @class = "text-danger" })
                </div>
            </div>

            <div id="divNumeroVehicule" class="form-group simple-tooltip simple-tooltip-NumeroVehicule">
                @Html.LabelFor(model => model.NumeroVehicule, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.NumeroVehicule, new { htmlAttributes = new { @class = "form-control", style = "max-width: 600px;" } })
                    @Html.ValidationMessageFor(model => model.NumeroVehicule, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Terminer" class="btn btn-default" />
                </div>
            </div>
        </div>

        <input style="display:inline" type="button" value="Previous" id="btnPrevious" onclick="Previous();">
        <input style="display:inline" type="button" value="Next" id="btnNext" onclick="Next();">

    </div>
}

<script type="text/javascript" src="~/Content/jquery.js"></script>
<script type="text/javascript" src="~/Content/jquery.simpletip-1.3.1.js"></script>
<script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?sensor=false"></script>
<script>

    var textBoxPosition = document.getElementById("Localisation");
    var messagePosition = document.getElementById("messageLocalisation");

    var master = $('#divFormComplete');
    var content = $(master).find('.content');
    var tooltips = $(master).find('.simple-tooltip');
    //var t = $(tooltips).find('simple-tooltip-RaisonDeplacement');

    var curEtape = 1;

    var etape1 = document.getElementById("page1");
    var etape2 = document.getElementById("page2");
    var etape3 = document.getElementById("page3");
    var etape4 = document.getElementById("page4");

    var tooltipContents = {
        'AuMoinsDeuxVehicules': "L'accident comporte-t-il au moins 2 véhicules? Dans le cas où il n'y a qu'un véhicule, veuillez décrire le plus précisemment possible le sinistre dans la section pour ajouter des informations puisque tous les cas ne sont pas détaillés.",
        'ProduitAuQuebec': "L'accident s'est produit dans la province de Québec",
        'ProprietairesIdentifies': "Les cas de délis de fuite sont couvert par la protection au Chapitre B de votre contrat ",
        'ProprietairesDifferents': "Le propriétaire des véhicules impliqués sont différents",
        'ConducteurHeurtePropreVehicule': "Avez-vous heurter votre propre voiture, que ce soit avec une autre voiture que vous posséder ou avec une voiture qui ne vous appartient pas",
        'SituationVehicules': "",
        'CirconstancesAccident': "",
        'RaisonDeplacement': "Étiez-vous en chemin vers votre travail? Était-ce un déplacement pour loisir?",
        'Blessures': "Indiquer les blessures non-négligeables des passagers et du conducteur s'il y a lieu",
        'Temoins': "Veulliez indiquer si vous avez fait appel aux policiers, ainsi que les noms de témoins",
        'InformationsAutreVoiture': "Les informations qui se trouve généralement sur la constat `l'amiable : Le nom et l'adresse du conducteur, le numéro de permis de conduire du conducteur, Le nom et l'adresse du propriétaire du véhicule inscrit au certificat d'immatriculation du véhicule, Le numéro de plaque d'immatriculation du véhicule, Les informations apparaissant à l'attestation d'assurance;",
        'DetailsSupplementaires': "Soyez le plus précis possible. Quelle était la situation, comment étaient positionner les véhicules, comment l'accident c'est-il produit",
        'Details': "Pour toute autre information pertinente",
        'NumeroVehicule':"Selon l'image, lequel entre X et Y représente votre véhicule?",

    
    };


    window.onload = function () {
        getLocation();
        ShowEtape(1);
        
        tooltips.find('.simple-tooltip-AuMoinsDeuxVehicules').simpletip({
            content: tooltipContents['AuMoinsDeuxVehicules'],
            position: 'top',
            hideEffect: 'slide',
            offset: [-250, 50]
        });

        tooltips.find('.simple-tooltip-ProduitAuQuebec').simpletip({
            content: tooltipContents['ProduitAuQuebec'],
            position: 'top',
            hideEffect: 'slide',
            offset: [-250, 50]
        });
        tooltips.find('.simple-tooltip-ProprietairesIdentifies').simpletip({
            content: tooltipContents['ProprietairesIdentifies'],
            position: 'top',
            hideEffect: 'slide',
            offset: [-250, 50]
        });
        tooltips.find('.simple-tooltip-ProprietairesDifferents').simpletip({
            content: tooltipContents['ProprietairesDifferents'],
            position: 'top',
            hideEffect: 'slide',
            offset: [-250, 50]
        });
        tooltips.find('.simple-tooltip-ConducteurHeurtePropreVehicule').simpletip({
            content: tooltipContents['ConducteurHeurtePropreVehicule'],
            position: 'top',
            hideEffect: 'slide',
            offset: [-250, 50]
        });
        tooltips.find('.simple-tooltip-RaisonDeplacement').simpletip({
            content: tooltipContents['RaisonDeplacement'],
            position: 'top',
            hideEffect: 'slide',
            offset: [250, 50]
        });
        tooltips.find('.simple-tooltip-Blessures').simpletip({
            content: tooltipContents['Blessures'],
            position: 'top',
            hideEffect: 'slide',
            offset: [250, 50]
        });
        tooltips.find('.simple-tooltip-Temoins').simpletip({
            content: tooltipContents['Temoins'],
            position: 'top',
            hideEffect: 'slide',
            offset: [250, 50]
        });
        tooltips.find('.simple-tooltip-InformationsAutreVoiture').simpletip({
            content: tooltipContents['InformationsAutreVoiture'],
            position: 'top',
            hideEffect: 'slide',
            offset: [250, 50]
        });
        tooltips.find('.simple-tooltip-DetailsSupplementaires').simpletip({
            content: tooltipContents['DetailsSupplementaires'],
            position: 'top',
            hideEffect: 'slide',
            offset: [250, 50]
        });
        tooltips.find('.simple-tooltip-Details').simpletip({
            content: tooltipContents['Details'],
            position: 'top',
            hideEffect: 'slide',
            offset: [250, 50]
        });
        tooltips.find('.simple-tooltip-NumeroVehicule').simpletip({
            content: tooltipContents['NumeroVehicule'],
            position: 'top',
            hideEffect: 'slide',
            offset: [250, 50]
        });
    }

    function ShowEtape(num)
    {
        etape1.style.display = "none";
        etape2.style.display = "none";
        etape3.style.display = "none";
        etape4.style.display = "none";
        var chkAccidentDeuxVehicules = document.getElementById("AuMoinsDeuxVehicules");
        if (num === 1) {
            curEtape = 1;
            etape1.style.display = "block";
            document.getElementById("btnPrevious").disabled = true;
            document.getElementById("btnNext").disabled = false;
        }
        if (num === 2) {
            if (chkAccidentDeuxVehicules.checked)
            {
                curEtape = 2;
                etape2.style.display = "block";
                document.getElementById("btnNext").disabled = false;
                document.getElementById("btnPrevious").disabled = false;
            }
            else
            {
                num = 4;
            }
        }
        if (num === 3) {
            if (chkAccidentDeuxVehicules.checked) {
                curEtape = 3;
                etape3.style.display = "block";
                document.getElementById("btnNext").disabled = false;
                document.getElementById("btnPrevious").disabled = false;
                MakePage3();
            }
            else {
                curEtape = 1;
                etape1.style.display = "block";
                document.getElementById("btnPrevious").disabled = true;
                document.getElementById("btnNext").disabled = false;
            }
        }
        if (num === 4) {
            curEtape = 4;
            etape4.style.display = "block";
            document.getElementById("btnPrevious").disabled = false;
            document.getElementById("btnNext").disabled = true;
            document.getElementById("divNumeroVehicule").style = "display: none";
            if (chkAccidentDeuxVehicules.checked) {
                MakePage4();
            }
        }
        document.getElementById("IndicateurEtape").innerHTML = "Étape " + curEtape;
    }

    function MakePage3()
    {
        var dropdownSitVeh = document.getElementById("SituationVehicules");
        $.post("@Url.Action("ExportCirconstanceJson", "Accidents")", { sit: dropdownSitVeh.options[dropdownSitVeh.selectedIndex].value }, function (data) {
            var divPage3 = document.getElementById("page3");
            divPage3.innerHTML = "";

            var divTable = document.createElement("div");
            divTable.id = "tableCirconstances";
            divTable.className = "table";
                
            var divRow;
            var divRowPicture;

            var jsonData = JSON.parse(data);

                //alert(jsonData);
            var i = 0;

            for (var key in jsonData)
            {
                if (i % 2 == 0)
                {
                    if (i != 0)
                    {
                        divTable.appendChild(divRow);
                        divTable.appendChild(divRowPicture);
                    }
                    divRow = document.createElement("div");
                    divRow.classList.add("form-group");
                    divRow.classList.add("row");
                    divRowPicture = document.createElement("div");
                    divRowPicture.classList.add("form-group");
                    divRowPicture.classList.add("row");
                }
                var input = document.createElement("input");
                if (i == 0)
                {
                    input.setAttribute("checked", "checked");
                    input.setAttribute("data-val-required", "Le champ Circonstances de l'accident est requis.");
                }
                input.classList.add("col-xs-1");
                input.classList.add("simple-tooltip");
                input.classList.add("simple-tooltip-" + key);
                input.id = "CirconstancesAccident";
                input.name = "CirconstancesAccident";
                input.value = key;
                input.type = "radio";
                divRow.appendChild(input);

                var label = document.createElement("label");
                label.classList.add("col-xs-4");
                label.classList.add("simple-tooltip");
                label.classList.add("simple-tooltip-" + key);
                label.setAttribute("for", key);
                label.innerText = jsonData[key][0];
                divRow.appendChild(label);

                if (jsonData[key].length > 1)
                {
                
                    var img = document.createElement("img");
                    //<img src="smiley.gif" alt="Smiley face" height="42" width="42">
                    img.src = jsonData[key][1];
                    img.height = "150";
                    img.width = "200";
                    img.alt = "";
                    img.classList.add("simple-tooltip");
                    img.classList.add("simple-tooltip-" + key);

                    if (jsonData[key][1].indexOf("Carambolage") == -1 && jsonData[key][1].indexOf("CollisionEnChaine") == -1 && jsonData[key][1].indexOf("PrioriteDePassage") == -1) {
                        img.classList.add("col-xs-2");

                        divRowPicture.appendChild(img);
                        if (jsonData[key].length > 2) {
                            var img2 = document.createElement("img");
                            //<img src="smiley.gif" alt="Smiley face" height="42" width="42">
                            img2.src = jsonData[key][2];
                            img2.height = "150";
                            img2.width = "200";
                            img2.alt = "";
                            img2.classList.add("col-xs-2");
                            img2.classList.add("simple-tooltip");
                            img2.classList.add("simple-tooltip-" + key);

                            divRowPicture.appendChild(img2);
                        }
                        else {
                            var divpad2 = document.createElement("div")
                            divpad2.classList.add("col-xs-2");
                            divpad2.classList.add("simple-tooltip");
                            divpad2.classList.add("simple-tooltip-" + key);
                            divRowPicture.appendChild(divpad2);
                        }
                        var divpad = document.createElement("div")
                        divpad.classList.add("col-xs-1");
                        divpad.classList.add("simple-tooltip");
                        divpad.classList.add("simple-tooltip-" + key);
                        divRowPicture.appendChild(divpad);
                    }
                    else
                    {
                        img.classList.add("col-xs-5");
                        divRowPicture.appendChild(img);
                    }
                }
                else
                {
                    var img = document.createElement("div")
                    img.classList.add("col-xs-5");
                    img.classList.add("simple-tooltip");
                    img.classList.add("simple-tooltip-" + key);
                    divRowPicture.appendChild(img);
                }

                i++;
            }

            divTable.appendChild(divRow);
            divTable.appendChild(divRowPicture);
            divPage3.appendChild(divTable);
        });
    }

    function MakePage4()
    {
        var circAccident = document.querySelector('input[name = "CirconstancesAccident"]:checked').value;
        $.post("@Url.Action("ExportImagesJson", "Accidents")", { sit: circAccident }, function (data) {
            
            var divNoVehicule = document.getElementById("divNumeroVehicule");

            var jsonData = JSON.parse(data);

            if (jsonData.length > 0) {
                divNoVehicule.style = "display:block";
            }
            else {
                divNoVehicule.style = "display:none";
            }
            //<div id="divNumeroVehicule" class="form-group simple-tooltip simple-tooltip-NumeroVehicule">
            //    <label class="control-label col-md-2" for="NumeroVehicule">Quel est la lettre de votre véhicule dans cette image?</label>
            //    <div class="col-md-7">
            //        <input class="form-control text-box single-line" data-val="true" data-val-number="The field Quel est la lettre de votre véhicule dans cette image? must be a number." data-val-required="Le champ Quel est la lettre de votre véhicule dans cette image? est requis." id="NumeroVehicule" name="NumeroVehicule" style="max-width: 600px;" type="number" value="0">
            //        <span class="field-validation-valid text-danger" data-valmsg-for="NumeroVehicule" data-valmsg-replace="true"></span>
            //    </div>
            //<div class="tooltip fixed active" style="display: block; left: 324.5px; top: 1555px; opacity: 0;">Selon l'image, lequel entre X et Y représente votre véhicule?</div></div>
            var divDivImg = document.getElementById("divImagesAccident");
            if (divDivImg == null)
            {
                divDivImg = document.createElement("div");
            }
            divDivImg.innerHTML = "";
            divDivImg.className = "col-md-12";
            divDivImg.id = "divImagesAccident";
            divDivImg.style.top = "10px";

            for (var i = 0; i < jsonData.length; i++)
            {
                var src = jsonData[i];
                var img = document.createElement("img");
                img.src = src;
                img.height = "150";
                img.width = "200";
                img.alt = "";
                if (src.indexOf("Carambolage") == -1 && src.indexOf("CollisionEnChaine") == -1 && src.indexOf("PrioriteDePassage") == -1) {
                    img.classList.add("col-md-3");
                    divDivImg.appendChild(img);
                }
                else
                {
                    img.classList.add("col-md-6");
                    divDivImg.appendChild(img);
                }
            }
            divNoVehicule.appendChild(divDivImg);
        });
    }

    function Next()
    {
        if (curEtape < 4) {
            curEtape = curEtape + 1;
            ShowEtape(curEtape);
        }
    }

    function Previous()
    {
        if (curEtape > 1) {
            curEtape = curEtape - 1;
            ShowEtape(curEtape);
        }
    }

    function GetAddress(position) {
        var latlng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
        var geocoder = geocoder = new google.maps.Geocoder();
        geocoder.geocode({ 'latLng': latlng }, function (results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
                if (results[1]) {
                    setPositionText(results[1].formatted_address);
                }
            }
        });
    }

    function setPositionText(text) {
        textBoxPosition.value = text;
    }

    function getLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(showPosition, showError);
        } else {
            messagePosition.innerHTML = "Geolocation is not supported by this browser.";
        }
    }

    function showError(error) {
        switch (error.code) {
            case error.PERMISSION_DENIED:
                messagePosition.innerHTML = "User denied the request for Geolocation."
                break;
            case error.POSITION_UNAVAILABLE:
                messagePosition.innerHTML = "Location information is unavailable."
                break;
            case error.TIMEOUT:
                messagePosition.innerHTML = "The request to get user location timed out."
                break;
            case error.UNKNOWN_ERROR:
                messagePosition.innerHTML = "An unknown error occurred."
                break;
        }
    }

    function showPosition(position) {
        var latlon = position.coords.latitude + "," + position.coords.longitude;

        var img_url = "http://maps.googleapis.com/maps/api/staticmap?center="+latlon+"&zoom=14&size=600x400&sensor=false";

        document.getElementById("mapHolder").innerHTML = "<img src='" + img_url + "'>";
        GetAddress(position);
    }
</script>