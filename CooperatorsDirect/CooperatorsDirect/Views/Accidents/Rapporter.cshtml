@model CooperatorsDirect.Models.Accident

@{
    ViewBag.Title = "Rapporter";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Rapporter un accident</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div id="divFormComplete" class="form-horizontal">
        <h4>Accident</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.DateAccidentEnregistre, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DateAccidentEnregistre, new { htmlAttributes = new { @class = "form-control", style = "max-width: 600px;", @readonly = "readonly", @value = "test" } })@*Model.DateAccidentEnregistre.ToShortDateString() } })*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DateAccidentProduit, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DateAccidentProduit, new { htmlAttributes = new { @class = "form-control", style = "max-width: 600px;" } })
                @Html.ValidationMessageFor(model => model.DateAccidentProduit, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Localisation, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Localisation, new { htmlAttributes = new { @class = "form-control", style = "max-width: 600px;" } })
                @Html.ValidationMessageFor(model => model.Localisation, "", new { @id = "messageLocalisation", @class = "text-danger" })
                <p></p>
                <div id="mapHolder"></div>
            </div>
        </div>

        <h3 id="IndicateurEtape">Étape 1</h3>

        <div id="page1" class="simple-tooltip">

            <div id="divAuMoinsDeuxVehicules" class="form-group simple-tooltip-AuMoinsDeuxVehicules">
                @Html.LabelFor(model => model.AuMoinsDeuxVehicules, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-2">
                    <div class="checkbox">
                        @Html.CheckBoxFor(model => model.AuMoinsDeuxVehicules, new { @checked = "checked" })
                        @Html.ValidationMessageFor(model => model.AuMoinsDeuxVehicules, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div id="divProduitAuQuebec" class="form-group simple-tooltip simple-tooltip-ProduitAuQuebec">
                @Html.LabelFor(model => model.ProduitAuQuebec, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.ProduitAuQuebec)
                        @Html.ValidationMessageFor(model => model.ProduitAuQuebec, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div id="divProprietairesIdentifies" class="form-group simple-tooltip simple-tooltip-proprietairesidentifies">
                @Html.LabelFor(model => model.ProprietairesIdentifies, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.ProprietairesIdentifies)
                        @Html.ValidationMessageFor(model => model.ProprietairesIdentifies, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div id="divProprietairesDifferents" class="form-group simple-tooltip simple-tooltip-ProprietairesDifferents">
                @Html.LabelFor(model => model.ProprietairesDifferents, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.ProprietairesDifferents)
                        @Html.ValidationMessageFor(model => model.ProprietairesDifferents, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div id="divConducteurHeurtePropreVehicule" class="form-group simple-tooltip simple-tooltip-ConducteurHeurtePropreVehicule">
                @Html.LabelFor(model => model.ConducteurHeurtePropreVehicule, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.ConducteurHeurtePropreVehicule)
                        @Html.ValidationMessageFor(model => model.ConducteurHeurtePropreVehicule, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

        </div>

        <div id="page2">

            <div id="divSituationVehicules" class="form-group simple-tooltip simple-tooltip-SituationVehicules">
                @Html.LabelFor(model => model.SituationVehicules, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EnumDropDownListFor(model => model.SituationVehicules, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.SituationVehicules, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>

        <div id="page3">

            <div class="table" id="tableCirconstances">
                @{
                    int i = 0;
                    int j = 0;
                    <div class="form-group row">
                        @foreach (var value in Enum.GetValues(Model.CirconstancesAccident.GetType()))
                        {

                            @Html.RadioButtonFor(model => model.CirconstancesAccident, value, new { @class = "col-xs-1" })
                            @Html.Label(value.ToString(), new { @class = "col-xs-4" })
                            i++;
                            if (i > 1)
                            {
                                i = 0;
                                j++;
                                @Html.Raw("</div>")
                                @Html.Raw("<div class=\"form-group row\">")
                            }
                        }
                    </div>
                }
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CirconstancesAccident, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EnumDropDownListFor(model => model.CirconstancesAccident, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CirconstancesAccident, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>

        <div id="page4">

            <div class="form-group">
                @Html.LabelFor(model => model.RaisonDeplacement, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.RaisonDeplacement, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.RaisonDeplacement, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Blessures, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Blessures, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Blessures, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Temoins, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Temoins, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Temoins, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.InformationsAutreVoiture, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.InformationsAutreVoiture, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.InformationsAutreVoiture, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.DetailsSupplementaires, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.DetailsSupplementaires, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DetailsSupplementaires, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Details, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Details, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Details, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.NumeroVehicule, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.NumeroVehicule, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.NumeroVehicule, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>

        <input style="display:inline" type="button" value="Previous" id="btnPrevious" onclick="Previous();">
        <input style="display:inline" type="button" value="Next" id="btnNext" onclick="Next();">

    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script type="text/javascript" src="~/Content/jquery.js"></script>
<script type="text/javascript" src="~/Content/jquery.simpletip-1.3.1.js"></script>
<script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?sensor=false"></script>
<script>

    var textBoxPosition = document.getElementById("Localisation");
    var messagePosition = document.getElementById("messageLocalisation");

    var master = $('#divFormComplete');
    var content = $(master).find('.content');
    var tooltips = $(master).find('.simple-tooltip');

    var curEtape = 1;

    var etape1 = document.getElementById("page1");
    var etape2 = document.getElementById("page2");
    var etape3 = document.getElementById("page3");
    var etape4 = document.getElementById("page4");

    var tooltipContents = {
        'AuMoinsDeuxVehicules': "L'accident comporte-t-il au moins 2 véhicules? Dans le cas où il n'y a qu'un véhicule, veuillez décrire le plus précisemment possible le sinistre dans la section pour ajouter des informations puisque tous les cas ne sont pas détaillés.",
        'ProduitAuQuebec': "",
        'ProprietairesIdentifies': "Les cas de délis de fuite sont couvert par la protection au Chapitre B de votre contrat ",
        'ProprietairesDifferents': ""
    };


    window.onload = function () {
        getLocation();
        ShowEtape(1);
        
        tooltips.find('.simple-tooltip-AuMoinsDeuxVehicules').simpletip({
            content: tooltipContents['AuMoinsDeuxVehicules'],
            position: 'top',
            hideEffect: 'slide',
            offset: [-250, 50]
        });

        tooltips.find('.simple-tooltip-ProduitAuQuebec').simpletip({
            content: tooltipContents['ProduitAuQuebec'],
            position: 'top',
            hideEffect: 'slide',
            offset: [-250, 50]
        });
    }

    function ShowEtape(num)
    {
        document.getElementById("IndicateurEtape").innerHTML = "Étape " + num;
        etape1.style.display = "none";
        etape2.style.display = "none";
        etape3.style.display = "none";
        etape4.style.display = "none";
        if (num === 1) {
            curEtape = 1;
            etape1.style.display = "block";
            document.getElementById("btnPrevious").disabled = true;
        }
        if (num === 2) {
            curEtape = 2;
            etape2.style.display = "block";
            document.getElementById("btnPrevious").disabled = false;
        }
        if (num === 3) {
            curEtape = 3;
            etape3.style.display = "block";
            document.getElementById("btnNext").disabled = false;
            var dropdownSitVeh = document.getElementById("SituationVehicules");
            $.post("@Url.Action("ExportCirconstanceJson", "Accidents")", { sit: dropdownSitVeh.options[dropdownSitVeh.selectedIndex].value }, function (data) {
                var divPage3 = document.getElementById("page3");
                divPage3.innerHTML = "";

                var divTable = document.createElement("div");
                divTable.id = "tableCirconstances";
                divTable.className = "table";
                
                var divRow = document.createElement("div");
                divRow.classList.add("form-group");
                divRow.classList.add("row");

                alert(data);
                alert(data.Length);
                alert(data.Count);
                alert(data[0]);
                alert(data[6]);

                divTable.appendChild(divRow);
                divPage3.appendChild(divTable);
            });
        }
        /*
        <div id="page3" style="display: block;">

            <div class="table" id="tableCirconstances">
                    <div class="form-group row">
                        <input checked="checked" class="col-xs-1" data-val="true" data-val-required="Le champ Circonstances de l'accident est requis." id="CirconstancesAccident" name="CirconstancesAccident" type="radio" value="CirculantMemeVoie">
                        <label class="col-xs-4" for="CirculantMemeVoie">CirculantMemeVoie</label>
                        <input class="col-xs-1" id="CirconstancesAccident" name="CirconstancesAccident" type="radio" value="VirageChausseeLaterale">
                        <label class="col-xs-4" for="VirageChausseeLaterale">VirageChausseeLaterale</label>
                    </div>
                    <div class="form-group row">
                        <input class="col-xs-1" id="CirconstancesAccident" name="CirconstancesAccident" type="radio" value="VehiculePrenantStationnement"><label class="col-xs-4" for="VehiculePrenantStationnement">VehiculePrenantStationnement</label>
                        <input class="col-xs-1" id="CirconstancesAccident" name="CirconstancesAccident" type="radio" value="VehiculeQuittantStationnement"><label class="col-xs-4" for="VehiculeQuittantStationnement">VehiculeQuittantStationnement</label></div><div class="form-group row"><input class="col-xs-1" id="CirconstancesAccident" name="CirconstancesAccident" type="radio" value="VehiculeEnStationnement"><label class="col-xs-4" for="VehiculeEnStationnement">VehiculeEnStationnement</label><input class="col-xs-1" id="CirconstancesAccident" name="CirconstancesAccident" type="radio" value="VehiculeEnStationnementIllegal">
                        <label class="col-xs-4" for="VehiculeEnStationnementIllegal">VehiculeEnStationnementIllegal</label></div><div class="form-group row">
                        <input class="col-xs-1" id="CirconstancesAccident" name="CirconstancesAccident" type="radio" value="CollisionLaterale"><label class="col-xs-4" for="CollisionLaterale">CollisionLaterale</label><input class="col-xs-1" id="CirconstancesAccident" name="CirconstancesAccident" type="radio" value="ChangementVoie"><label class="col-xs-4" for="ChangementVoie">ChangementVoie</label></div><div class="form-group row"><input class="col-xs-1" id="CirconstancesAccident" name="CirconstancesAccident" type="radio" value="DepassementChausseeLaterale"><label class="col-xs-4" for="DepassementChausseeLaterale">DepassementChausseeLaterale</label>
                        <input class="col-xs-1" id="CirconstancesAccident" name="CirconstancesAccident" type="radio" value="DepassementChausseeLateraleIntersection"><label class="col-xs-4" for="DepassementChausseeLateraleIntersection">DepassementChausseeLateraleIntersection</label></div><div class="form-group row"><input class="col-xs-1" id="CirconstancesAccident" name="CirconstancesAccident" type="radio" value="VehiculeChevauchantAxeMediant"><label class="col-xs-4" for="VehiculeChevauchantAxeMediant">VehiculeChevauchantAxeMediant</label><input class="col-xs-1" id="CirconstancesAccident" name="CirconstancesAccident" type="radio" value="VehiculesPositionIndeterminee"><label class="col-xs-4" for="VehiculesPositionIndeterminee">VehiculesPositionIndeterminee</label></div><div class="form-group row"><input class="col-xs-1" id="CirconstancesAccident" name="CirconstancesAccident" type="radio" value="VehiculeChevauchantLigneContinue"><label class="col-xs-4" for="VehiculeChevauchantLigneContinue">VehiculeChevauchantLigneContinue</label><input class="col-xs-1" id="CirconstancesAccident" name="CirconstancesAccident" type="radio" value="PrioriteADroite"><label class="col-xs-4" for="PrioriteADroite">PrioriteADroite</label></div><div class="form-group row">
                        <input class="col-xs-1" id="CirconstancesAccident" name="CirconstancesAccident" type="radio" value="PrioriteDePassage"><label class="col-xs-4" for="PrioriteDePassage">PrioriteDePassage</label><input class="col-xs-1" id="CirconstancesAccident" name="CirconstancesAccident" type="radio" value="ArretOuFeuDefectueux"><label class="col-xs-4" for="ArretOuFeuDefectueux">ArretOuFeuDefectueux</label></div><div class="form-group row"><input class="col-xs-1" id="CirconstancesAccident" name="CirconstancesAccident" type="radio" value="VehiculeQuittantChausseeLaterale"><label class="col-xs-4" for="VehiculeQuittantChausseeLaterale">VehiculeQuittantChausseeLaterale</label>
                        <input class="col-xs-1" id="CirconstancesAccident" name="CirconstancesAccident" type="radio" value="NonRespectSignalisation"><label class="col-xs-4" for="NonRespectSignalisation">NonRespectSignalisation</label>
                        </div>
                        <div class="form-group row"><input class="col-xs-1" id="CirconstancesAccident" name="CirconstancesAccident" type="radio" value="VirageSurFlecheVerte">
                        <label class="col-xs-4" for="VirageSurFlecheVerte">VirageSurFlecheVerte</label><input class="col-xs-1" id="CirconstancesAccident" name="CirconstancesAccident" type="radio" value="VirageADroiteSurFeuRouge"><label class="col-xs-4" for="VirageADroiteSurFeuRouge">VirageADroiteSurFeuRouge</label></div>
                    <div class="form-group row"><input class="col-xs-1" id="CirconstancesAccident" name="CirconstancesAccident" type="radio" value="MarcheArriereDemiTour"><label class="col-xs-4" for="MarcheArriereDemiTour">MarcheArriereDemiTour</label><input class="col-xs-1" id="CirconstancesAccident" name="CirconstancesAccident" type="radio" value="OuvertureDunePortiere"><label class="col-xs-4" for="OuvertureDunePortiere">OuvertureDunePortiere</label></div><div class="form-group row"><input class="col-xs-1" id="CirconstancesAccident" name="CirconstancesAccident" type="radio" value="CollisionEnChaine"><label class="col-xs-4" for="CollisionEnChaine">CollisionEnChaine</label><input class="col-xs-1" id="CirconstancesAccident" name="CirconstancesAccident" type="radio" value="Carambolage"><label class="col-xs-4" for="Carambolage">Carambolage</label></div><div class="form-group row"><input class="col-xs-1" id="CirconstancesAccident" name="CirconstancesAccident" type="radio" value="CollisionParcStationnementSansSignalisation"><label class="col-xs-4" for="CollisionParcStationnementSansSignalisation">CollisionParcStationnementSansSignalisation</label>
                    </div>

            </div>

        </div>
        */
        if (num === 4) {
            curEtape = 4;
            etape4.style.display = "block";
            document.getElementById("btnNext").disabled = true;
        }
    }

    function Next()
    {
        if (curEtape < 4) {
            curEtape = curEtape + 1;
            ShowEtape(curEtape);
        }
    }

    function Previous()
    {
        if (curEtape > 1) {
            curEtape = curEtape - 1;
            ShowEtape(curEtape);
        }
    }

    function GetAddress(position) {
        var latlng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
        var geocoder = geocoder = new google.maps.Geocoder();
        geocoder.geocode({ 'latLng': latlng }, function (results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
                if (results[1]) {
                    setPositionText(results[1].formatted_address);
                }
            }
        });
    }

    function setPositionText(text) {
        textBoxPosition.value = text;
    }

    function getLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(showPosition, showError);
        } else {
            messagePosition.innerHTML = "Geolocation is not supported by this browser.";
        }
    }

    function showError(error) {
        switch (error.code) {
            case error.PERMISSION_DENIED:
                messagePosition.innerHTML = "User denied the request for Geolocation."
                break;
            case error.POSITION_UNAVAILABLE:
                messagePosition.innerHTML = "Location information is unavailable."
                break;
            case error.TIMEOUT:
                messagePosition.innerHTML = "The request to get user location timed out."
                break;
            case error.UNKNOWN_ERROR:
                messagePosition.innerHTML = "An unknown error occurred."
                break;
        }
    }

    function showPosition(position) {
        var latlon = position.coords.latitude + "," + position.coords.longitude;

        var img_url = "http://maps.googleapis.com/maps/api/staticmap?center="+latlon+"&zoom=14&size=600x400&sensor=false";

        document.getElementById("mapHolder").innerHTML = "<img src='" + img_url + "'>";
        GetAddress(position);
    }
</script>